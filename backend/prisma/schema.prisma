datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   Int            @id @default(autoincrement())
  username             String         @unique
  password             String
  role                 String         @default("user")
  favoriteChampions    FavoriteChampion[]
  tournaments          Tournament[]   @relation("UserTournaments")
  tournamentParticipants TournamentParticipant[]
  riotGameName         String?
  riotTagLine          String?
  riotPuuid            String?        @unique
  refreshTokens        RefreshToken[] 
  profileImage         String?
  bugReports           BugReport[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model FavoriteChampion {
  id        Int      @id @default(autoincrement())
  name      String
  role      String?
  note      String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tournament {
  id           Int       @id @default(autoincrement())
  name         String
  date         DateTime
  status       String    @default("upcoming") 
  creatorId    Int
  creator      User      @relation(fields: [creatorId], references: [id], onDelete: Cascade, name: "UserTournaments")
  participants TournamentParticipant[]
}

model TournamentParticipant {
  id           Int       @id @default(autoincrement())
  tournamentId Int
  userId       Int

  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BugReport {
  id          Int      @id @default(autoincrement())
  userId      Int?     
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  description String
  status      String   @default("open") // "open" alebo "resolved"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


